<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates player variables
randomize();
grav = .6;
hsp = 0;
vsp = 0;
jumpSpeed = 7;
moveSpeed = 4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Player Movement
//Get the player's movement input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("A"));
key_jump = keyboard_check_pressed(vk_space);

//React to inputs
move = key_left + key_right;
hsp = move * moveSpeed;
if(vsp &lt; 10) {
    vsp += grav;
}

//Player can only jump while on a wall or building block
if(place_meeting(x, y + 1, obj_wall)) {
    vsp = key_jump * -jumpSpeed;
}
if(place_meeting(x, y + 1, obj_buildingBlock)) {
    vsp = key_jump * -jumpSpeed;
}

//If there is a wall/block to the right/left and player is moving in that direction,
//move as far in the direction of the wall/block as possible.
if(place_meeting(x + hsp, y, obj_wall)) {
    while(!place_meeting(x + sign(hsp), y, obj_wall)) {
        x += sign(hsp);
    }
    hsp = 0;
}
if(place_meeting(x + hsp, y, obj_buildingBlock)) {
    while(!place_meeting(x + sign(hsp), y, obj_buildingBlock)) {
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//if there is a wall beneath/above player and player is moving in that direction,
//move as far in the direction of the wall as possible.
if(place_meeting(x, y + vsp, obj_wall)) {
    while(!place_meeting(x, y + sign(vsp), obj_wall)) {
        y += sign(vsp);
    }
    vsp = 0;
}
if(place_meeting(x, y + vsp, obj_buildingBlock)) {
    while(!place_meeting(x, y + sign(vsp), obj_buildingBlock)) {
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;

move_wrap(true, false, 10);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates buildingBlocks
//checks if right button is pressed
if(mouse_check_button_pressed(mb_right)) {
    //checks if mouse is hovering over a buildingBlock, player, or wall
    if(!position_meeting(mouse_x, mouse_y, obj_buildingBlock) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_player) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_wall) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_pointBlock)) {
        //centers buildingBlock at the center of the block mouse is in.
        tempXBlock = mouse_x + 16;
        tempYBlock = mouse_y + 16;
        newXBlock = tempXBlock - (tempXBlock mod(32));
        newYBlock = tempYBlock - (tempYBlock mod(32));
        
        //creates an x and y variable for the top right corner of the player 
        //object that is located at the center of the block the top left corner 
        //is located in.
        tempXPlayerTR = obj_player.x + 7 + 16;
        tempYPlayerTR = obj_player.y - 15 + 16;
        newXPlayerTR = tempXPlayerTR - (tempXPlayerTR mod(32));
        newYPlayerTR = tempYPlayerTR - (tempYPlayerTR mod(32));
        
        //top left corner of the player object
        tempXPlayerTL = obj_player.x - 7 + 16;
        tempYPlayerTL = obj_player.y - 15 + 16;
        newXPlayerTL = tempXPlayerTL - (tempXPlayerTL mod(32));
        newYPlayerTL = tempYPlayerTL - (tempYPlayerTL mod(32));
        
        //bottom right corner of the player object
        tempXPlayerBR = obj_player.x + 7 + 16;
        tempYPlayerBR = obj_player.y + 14 + 16;
        newXPlayerBR = tempXPlayerBR - (tempXPlayerBR mod(32));
        newYPlayerBR = tempYPlayerBR - (tempYPlayerBR mod(32));
        
        //bottom left corner of the player object
        tempXPlayerBL = obj_player.x - 7 + 16;
        tempYPlayerBL = obj_player.y + 14 + 16;
        newXPlayerBL = tempXPlayerBL - (tempXPlayerBL mod(32));
        newYPlayerBL = tempYPlayerBL - (tempYPlayerBL mod(32));
        
        //checks that the newly created x and y values of the block are not equal to 
        //both the newly created x and y values of any of the player corners.
        if(newXBlock != newXPlayerTR || newYBlock != newYPlayerTR) {
            if(newXBlock != newXPlayerTL || newYBlock != newYPlayerTL) {
                if(newXBlock != newXPlayerBR || newYBlock != newYPlayerBR) {
                    if(newXBlock != newXPlayerBL || newYBlock != newYPlayerBL) {
                        //checks that player is within 100 units of the new block
                        if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 100) {
                            instance_create(newXBlock, newYBlock, obj_buildingBlock);
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates preBuildings
//checks that no mouse buttons are being pressed and there are no other preBuilding objects
if(!mouse_check_button_pressed(mb_any) &amp;&amp; instance_number(obj_preBuilding) = 0){
    //checks if mouse is hovering over a buildingBlock, player, wall, or preBuilding
    if(!position_meeting(mouse_x, mouse_y, obj_buildingBlock) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_player) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_wall) &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_pointBlock)) {
        //centers preBuilding at the center of the block mouse is in.
        tempXBlock = mouse_x + 16;
        tempYBlock = mouse_y + 16;
        newXBlock = tempXBlock - (tempXBlock mod(32));
        newYBlock = tempYBlock - (tempYBlock mod(32));
        
        //creates an x and y variable for the top right corner of the player 
        //object that is located at the center of the block the top left corner 
        //is located in.
        tempXPlayerTR = obj_player.x + 7 + 16;
        tempYPlayerTR = obj_player.y - 15 + 16;
        newXPlayerTR = tempXPlayerTR - (tempXPlayerTR mod(32));
        newYPlayerTR = tempYPlayerTR - (tempYPlayerTR mod(32));
        
        //top left corner of the player object
        tempXPlayerTL = obj_player.x - 7 + 16;
        tempYPlayerTL = obj_player.y - 15 + 16;
        newXPlayerTL = tempXPlayerTL - (tempXPlayerTL mod(32));
        newYPlayerTL = tempYPlayerTL - (tempYPlayerTL mod(32));
        
        //bottom right corner of the player object
        tempXPlayerBR = obj_player.x + 7 + 16;
        tempYPlayerBR = obj_player.y + 14 + 16;
        newXPlayerBR = tempXPlayerBR - (tempXPlayerBR mod(32));
        newYPlayerBR = tempYPlayerBR - (tempYPlayerBR mod(32));
        
        //bottom left corner of the player object
        tempXPlayerBL = obj_player.x - 7 + 16;
        tempYPlayerBL = obj_player.y + 14 + 16;
        newXPlayerBL = tempXPlayerBL - (tempXPlayerBL mod(32));
        newYPlayerBL = tempYPlayerBL - (tempYPlayerBL mod(32));
        
        //checks that the newly created x and y values of the block are not equal to 
        //both the newly created x and y values of any of the corners.
        if(newXBlock != newXPlayerTR || newYBlock != newYPlayerTR) {
            if(newXBlock != newXPlayerTL || newYBlock != newYPlayerTL) {
                if(newXBlock != newXPlayerBR || newYBlock != newYPlayerBR) {
                    if(newXBlock != newXPlayerBL || newYBlock != newYPlayerBL) { 
                        //checks if distance from player to center of block is less than 100
                        if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 100) {
                            instance_create(newXBlock, newYBlock, obj_preBuilding);
                        }
                        else{
                            instance_create(newXBlock, newYBlock, obj_placeHolder);
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates preDestroys
if(!mouse_check_button_pressed(mb_any) &amp;&amp; instance_number(obj_preDestroy) = 0){
    //checks if mouse is hovering over a buildingBlock, player, wall, or preBuilding
    if(position_meeting(mouse_x, mouse_y, obj_buildingBlock)) {
        //centers preBuilding at the center of the block mouse is in.
        tempXBlock = mouse_x + 16;
        tempYBlock = mouse_y + 16;
        newXBlock = tempXBlock - (tempXBlock mod(32));
        newYBlock = tempYBlock - (tempYBlock mod(32));
        //checks if distance from player to center of block is less than 100.
        if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 140) {
            instance_create(newXBlock, newYBlock, obj_preDestroy);
            obj_preDestroy.depth = -10;
        }
        else {
            instance_create(newXBlock, newYBlock, obj_placeHolder);
            obj_placeHolder.depth = -10;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroys buildingBlocks
//checks if left button is pressed
if(mouse_check_button_pressed(mb_left)) {
    //checks if mouse is hovering over a buildingBlock
    if(position_meeting(mouse_x, mouse_y, obj_buildingBlock)) {
        //centers mouse at the center of the block mouse is in.
        tempXBlock = mouse_x + 16;
        tempYBlock = mouse_y + 16;
        newXBlock = tempXBlock - (tempXBlock mod(32));
        newYBlock = tempYBlock - (tempYBlock mod(32));
        
        //destroys the buildingBlock that mouse is currently in
        if(sqrt( sqr(newXBlock - obj_player.x) + sqr(newYBlock - obj_player.y) ) &lt; 140) {
            with instance_place(newXBlock, newYBlock, obj_buildingBlock) {
                instance_destroy();
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn pointBlocks
if(!instance_exists(obj_pointBlock)) {
    tempXCoord = random_range(0, 1024) + 16;
    tempYCoord = random_range(0, 768) + 16;
    xCoord = tempXCoord - (tempXCoord mod(32));
    yCoord = tempYCoord - (tempYCoord mod(32));
    if(!position_meeting(xCoord, yCoord, obj_wall) &amp;&amp; yCoord &gt; 64) {
        instance_create(xCoord, yCoord, obj_pointBlock);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_pointBlock">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_pointBlock</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>score++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart code
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
